//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export interface IRassoApiClient {

    /**
     * @return OK
     */
    home(): Promise<void>;

    /**
     * @return OK
     */
    admin(): Promise<void>;

    /**
     * @return OK
     */
    eventsGET(): Promise<EventResponseListApiResponse>;

    /**
     * @param body (optional) 
     * @return OK
     */
    eventsPOST(body: CreateEventRequest | undefined): Promise<EventResponseApiResponse>;

    /**
     * @return OK
     */
    eventsGET2(id: string): Promise<DetailedEventResponseApiResponse>;

    /**
     * @param body (optional) 
     * @return OK
     */
    eventsPUT(id: string, body: UpdateEventRequest | undefined): Promise<EventResponseApiResponse>;

    /**
     * @param body (optional) 
     * @return OK
     */
    eventsPATCH(id: string, body: UpdateEventRequest | undefined): Promise<EventResponseApiResponse>;

    /**
     * @return OK
     */
    eventsDELETE(id: string): Promise<StringApiResponse>;

    /**
     * @return OK
     */
    top(): Promise<EventResponseListApiResponse>;

    /**
     * @param locationName (optional) 
     * @param latitude (optional) 
     * @param longitude (optional) 
     * @return OK
     */
    location(locationName: string | undefined, latitude: number | undefined, longitude: number | undefined): Promise<EventResponseListApiResponse>;

    /**
     * @return OK
     */
    main(): Promise<EventResponseApiResponse>;
}

export class RassoApiClient implements IRassoApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    home(): Promise<void> {
        let url_ = this.baseUrl + "/api/home";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processHome(_response);
        });
    }

    protected processHome(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    admin(): Promise<void> {
        let url_ = this.baseUrl + "/api/admin";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processAdmin(_response);
        });
    }

    protected processAdmin(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    eventsGET(): Promise<EventResponseListApiResponse> {
        let url_ = this.baseUrl + "/api/events";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processEventsGET(_response);
        });
    }

    protected processEventsGET(response: Response): Promise<EventResponseListApiResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EventResponseListApiResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EventResponseListApiResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    eventsPOST(body: CreateEventRequest | undefined): Promise<EventResponseApiResponse> {
        let url_ = this.baseUrl + "/api/events";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processEventsPOST(_response);
        });
    }

    protected processEventsPOST(response: Response): Promise<EventResponseApiResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EventResponseApiResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EventResponseApiResponse>(null as any);
    }

    /**
     * @return OK
     */
    eventsGET2(id: string): Promise<DetailedEventResponseApiResponse> {
        let url_ = this.baseUrl + "/api/events/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processEventsGET2(_response);
        });
    }

    protected processEventsGET2(response: Response): Promise<DetailedEventResponseApiResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DetailedEventResponseApiResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DetailedEventResponseApiResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    eventsPUT(id: string, body: UpdateEventRequest | undefined): Promise<EventResponseApiResponse> {
        let url_ = this.baseUrl + "/api/events/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processEventsPUT(_response);
        });
    }

    protected processEventsPUT(response: Response): Promise<EventResponseApiResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EventResponseApiResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EventResponseApiResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    eventsPATCH(id: string, body: UpdateEventRequest | undefined): Promise<EventResponseApiResponse> {
        let url_ = this.baseUrl + "/api/events/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PATCH",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processEventsPATCH(_response);
        });
    }

    protected processEventsPATCH(response: Response): Promise<EventResponseApiResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EventResponseApiResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EventResponseApiResponse>(null as any);
    }

    /**
     * @return OK
     */
    eventsDELETE(id: string): Promise<StringApiResponse> {
        let url_ = this.baseUrl + "/api/events/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processEventsDELETE(_response);
        });
    }

    protected processEventsDELETE(response: Response): Promise<StringApiResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StringApiResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<StringApiResponse>(null as any);
    }

    /**
     * @return OK
     */
    top(): Promise<EventResponseListApiResponse> {
        let url_ = this.baseUrl + "/api/events/top";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processTop(_response);
        });
    }

    protected processTop(response: Response): Promise<EventResponseListApiResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EventResponseListApiResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EventResponseListApiResponse>(null as any);
    }

    /**
     * @param locationName (optional) 
     * @param latitude (optional) 
     * @param longitude (optional) 
     * @return OK
     */
    location(locationName: string | undefined, latitude: number | undefined, longitude: number | undefined): Promise<EventResponseListApiResponse> {
        let url_ = this.baseUrl + "/api/events/location?";
        if (locationName === null)
            throw new Error("The parameter 'locationName' cannot be null.");
        else if (locationName !== undefined)
            url_ += "locationName=" + encodeURIComponent("" + locationName) + "&";
        if (latitude === null)
            throw new Error("The parameter 'latitude' cannot be null.");
        else if (latitude !== undefined)
            url_ += "latitude=" + encodeURIComponent("" + latitude) + "&";
        if (longitude === null)
            throw new Error("The parameter 'longitude' cannot be null.");
        else if (longitude !== undefined)
            url_ += "longitude=" + encodeURIComponent("" + longitude) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processLocation(_response);
        });
    }

    protected processLocation(response: Response): Promise<EventResponseListApiResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EventResponseListApiResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EventResponseListApiResponse>(null as any);
    }

    /**
     * @return OK
     */
    main(): Promise<EventResponseApiResponse> {
        let url_ = this.baseUrl + "/api/events/main";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processMain(_response);
        });
    }

    protected processMain(response: Response): Promise<EventResponseApiResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EventResponseApiResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EventResponseApiResponse>(null as any);
    }
}

export class CreateEventRequest implements ICreateEventRequest {
    title?: string | undefined;
    description?: string | undefined;
    date?: Date;
    location?: string | undefined;
    category?: string | undefined;

    constructor(data?: ICreateEventRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.description = _data["description"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.location = _data["location"];
            this.category = _data["category"];
        }
    }

    static fromJS(data: any): CreateEventRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateEventRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["description"] = this.description;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["location"] = this.location;
        data["category"] = this.category;
        return data;
    }
}

export interface ICreateEventRequest {
    title?: string | undefined;
    description?: string | undefined;
    date?: Date;
    location?: string | undefined;
    category?: string | undefined;
}

export class DetailedEventResponse implements IDetailedEventResponse {
    id?: string;
    title?: string | undefined;
    description?: string | undefined;
    date?: Date;
    location?: string | undefined;
    latitude?: number | undefined;
    longitude?: number | undefined;
    category?: string | undefined;
    status?: StatusEnum;
    isFavorite?: boolean;
    organizer?: OrganizerResponse;
    participantCount?: number;
    moderatedByUser?: ModeratorResponse;
    moderatedAt?: Date | undefined;
    refusalReasonLabel?: string | undefined;
    refusalComment?: string | undefined;
    imageUrls?: string[] | undefined;

    constructor(data?: IDetailedEventResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.description = _data["description"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.location = _data["location"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
            this.category = _data["category"];
            this.status = _data["status"];
            this.isFavorite = _data["isFavorite"];
            this.organizer = _data["organizer"] ? OrganizerResponse.fromJS(_data["organizer"]) : <any>undefined;
            this.participantCount = _data["participantCount"];
            this.moderatedByUser = _data["moderatedByUser"] ? ModeratorResponse.fromJS(_data["moderatedByUser"]) : <any>undefined;
            this.moderatedAt = _data["moderatedAt"] ? new Date(_data["moderatedAt"].toString()) : <any>undefined;
            this.refusalReasonLabel = _data["refusalReasonLabel"];
            this.refusalComment = _data["refusalComment"];
            if (Array.isArray(_data["imageUrls"])) {
                this.imageUrls = [] as any;
                for (let item of _data["imageUrls"])
                    this.imageUrls!.push(item);
            }
        }
    }

    static fromJS(data: any): DetailedEventResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DetailedEventResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["description"] = this.description;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["location"] = this.location;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["category"] = this.category;
        data["status"] = this.status;
        data["isFavorite"] = this.isFavorite;
        data["organizer"] = this.organizer ? this.organizer.toJSON() : <any>undefined;
        data["participantCount"] = this.participantCount;
        data["moderatedByUser"] = this.moderatedByUser ? this.moderatedByUser.toJSON() : <any>undefined;
        data["moderatedAt"] = this.moderatedAt ? this.moderatedAt.toISOString() : <any>undefined;
        data["refusalReasonLabel"] = this.refusalReasonLabel;
        data["refusalComment"] = this.refusalComment;
        if (Array.isArray(this.imageUrls)) {
            data["imageUrls"] = [];
            for (let item of this.imageUrls)
                data["imageUrls"].push(item);
        }
        return data;
    }
}

export interface IDetailedEventResponse {
    id?: string;
    title?: string | undefined;
    description?: string | undefined;
    date?: Date;
    location?: string | undefined;
    latitude?: number | undefined;
    longitude?: number | undefined;
    category?: string | undefined;
    status?: StatusEnum;
    isFavorite?: boolean;
    organizer?: OrganizerResponse;
    participantCount?: number;
    moderatedByUser?: ModeratorResponse;
    moderatedAt?: Date | undefined;
    refusalReasonLabel?: string | undefined;
    refusalComment?: string | undefined;
    imageUrls?: string[] | undefined;
}

export class DetailedEventResponseApiResponse implements IDetailedEventResponseApiResponse {
    success?: boolean;
    message?: string | undefined;
    data?: DetailedEventResponse;
    errors?: ValidationError[] | undefined;

    constructor(data?: IDetailedEventResponseApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.message = _data["message"];
            this.data = _data["data"] ? DetailedEventResponse.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ValidationError.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DetailedEventResponseApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DetailedEventResponseApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IDetailedEventResponseApiResponse {
    success?: boolean;
    message?: string | undefined;
    data?: DetailedEventResponse;
    errors?: ValidationError[] | undefined;
}

export class EventResponse implements IEventResponse {
    id?: string;
    title?: string | undefined;
    description?: string | undefined;
    date?: Date;
    location?: string | undefined;
    latitude?: number | undefined;
    longitude?: number | undefined;
    category?: string | undefined;
    status?: StatusEnum;
    isFavorite?: boolean;

    constructor(data?: IEventResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.description = _data["description"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.location = _data["location"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
            this.category = _data["category"];
            this.status = _data["status"];
            this.isFavorite = _data["isFavorite"];
        }
    }

    static fromJS(data: any): EventResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EventResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["description"] = this.description;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["location"] = this.location;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["category"] = this.category;
        data["status"] = this.status;
        data["isFavorite"] = this.isFavorite;
        return data;
    }
}

export interface IEventResponse {
    id?: string;
    title?: string | undefined;
    description?: string | undefined;
    date?: Date;
    location?: string | undefined;
    latitude?: number | undefined;
    longitude?: number | undefined;
    category?: string | undefined;
    status?: StatusEnum;
    isFavorite?: boolean;
}

export class EventResponseApiResponse implements IEventResponseApiResponse {
    success?: boolean;
    message?: string | undefined;
    data?: EventResponse;
    errors?: ValidationError[] | undefined;

    constructor(data?: IEventResponseApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.message = _data["message"];
            this.data = _data["data"] ? EventResponse.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ValidationError.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EventResponseApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EventResponseApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IEventResponseApiResponse {
    success?: boolean;
    message?: string | undefined;
    data?: EventResponse;
    errors?: ValidationError[] | undefined;
}

export class EventResponseListApiResponse implements IEventResponseListApiResponse {
    success?: boolean;
    message?: string | undefined;
    data?: EventResponse[] | undefined;
    errors?: ValidationError[] | undefined;

    constructor(data?: IEventResponseListApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.message = _data["message"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(EventResponse.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ValidationError.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EventResponseListApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EventResponseListApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["message"] = this.message;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IEventResponseListApiResponse {
    success?: boolean;
    message?: string | undefined;
    data?: EventResponse[] | undefined;
    errors?: ValidationError[] | undefined;
}

export class ModeratorResponse implements IModeratorResponse {
    firstName?: string | undefined;
    lastName?: string | undefined;
    userName?: string | undefined;
    avatarUrl?: string | undefined;

    constructor(data?: IModeratorResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.userName = _data["userName"];
            this.avatarUrl = _data["avatarUrl"];
        }
    }

    static fromJS(data: any): ModeratorResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ModeratorResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["userName"] = this.userName;
        data["avatarUrl"] = this.avatarUrl;
        return data;
    }
}

export interface IModeratorResponse {
    firstName?: string | undefined;
    lastName?: string | undefined;
    userName?: string | undefined;
    avatarUrl?: string | undefined;
}

export class OrganizerResponse implements IOrganizerResponse {
    firstName?: string | undefined;
    lastName?: string | undefined;
    userName?: string | undefined;
    avatarUrl?: string | undefined;

    constructor(data?: IOrganizerResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.userName = _data["userName"];
            this.avatarUrl = _data["avatarUrl"];
        }
    }

    static fromJS(data: any): OrganizerResponse {
        data = typeof data === 'object' ? data : {};
        let result = new OrganizerResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["userName"] = this.userName;
        data["avatarUrl"] = this.avatarUrl;
        return data;
    }
}

export interface IOrganizerResponse {
    firstName?: string | undefined;
    lastName?: string | undefined;
    userName?: string | undefined;
    avatarUrl?: string | undefined;
}

export enum StatusEnum {
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
}

export class StringApiResponse implements IStringApiResponse {
    success?: boolean;
    message?: string | undefined;
    data?: string | undefined;
    errors?: ValidationError[] | undefined;

    constructor(data?: IStringApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.message = _data["message"];
            this.data = _data["data"];
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ValidationError.fromJS(item));
            }
        }
    }

    static fromJS(data: any): StringApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new StringApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["message"] = this.message;
        data["data"] = this.data;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IStringApiResponse {
    success?: boolean;
    message?: string | undefined;
    data?: string | undefined;
    errors?: ValidationError[] | undefined;
}

export class UpdateEventRequest implements IUpdateEventRequest {
    title?: string | undefined;
    description?: string | undefined;
    date?: Date;
    location?: string | undefined;
    category?: string | undefined;

    constructor(data?: IUpdateEventRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.description = _data["description"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.location = _data["location"];
            this.category = _data["category"];
        }
    }

    static fromJS(data: any): UpdateEventRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateEventRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["description"] = this.description;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["location"] = this.location;
        data["category"] = this.category;
        return data;
    }
}

export interface IUpdateEventRequest {
    title?: string | undefined;
    description?: string | undefined;
    date?: Date;
    location?: string | undefined;
    category?: string | undefined;
}

export class ValidationError implements IValidationError {
    field?: string | undefined;
    errors?: string[] | undefined;

    constructor(data?: IValidationError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.field = _data["field"];
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(item);
            }
        }
    }

    static fromJS(data: any): ValidationError {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["field"] = this.field;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item);
        }
        return data;
    }
}

export interface IValidationError {
    field?: string | undefined;
    errors?: string[] | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}